{"HistoryCtrl.js":[{"timestamp":1456435364630,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    console.log(HistoryService.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456435313660,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456434972852,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n  console.log();\n]);\n"},{"timestamp":1456434884324,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456434696285,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n    console.log();\n  }\n]);\n"},{"timestamp":1456434568622,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    $timeout(function () {\n      this.files = HistoryService.files;\n    }.bind(this), 10);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n    console.log();\n  }\n]);\n"},{"timestamp":1456434467823,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    $timeout(function () {\n      this.files = HistoryService.files;\n    }.bind(this), 10);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456434455999,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    $timeout(function () {\n      this.files = HistoryService.files;\n    }.bind(this), 10);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n  console.log();\n]);\n"},{"timestamp":1456431502220,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    $timeout(function () {\n      this.files = HistoryService.files;\n    }.bind(this), 10);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456431005281,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456431004549,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456430986088,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        this.files = file;\n      }.bind(this), 10);\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456430951044,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        this.files = file;\n      }.bind(this), 10);\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456430523451,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        this.files = file;\n      }.bind(this), 10);\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456430259737,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        this.files = file;\n        $scope.files = file;\n        $scope.$apply();\n      }.bind(this), 10);\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456430106319,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        this.files = file;\n        $scope.$apply();\n      }.bind(this), 10);\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456430102136,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        this.files = file;\n        $scope.apply();\n      }.bind(this), 10);\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456429982749,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        this.files = file;\n      }.bind(this), 10);\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456429870503,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n        this.files = file;\n        $scope.$apply();\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456429536765,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n      debugger;\n        this.files = file;\n        $scope.$apply();\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456429535267,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n      debugger;\n        this.files = file;\n        $scope.$apply();\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456429495242,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n      debugger;\n        this.files = file;\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456429330595,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = [];\n    HistoryService.onUpdateFiles(function(file){\n        this.files = file;\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456426315572,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    HistoryService.onUpdateFiles(function(file){\n        this.files = file;\n        console.log(this.files);\n    }.bind(this))\n    console.log(this.files);\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456426275169,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    HistoryService.onUpdateFiles(function(file){\n        this.files = file;\n        console.log(this.files);\n    }.bind(this))\n\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456426273559,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    HistoryService.onUpdateFiles(function(file){\n      console.log(this.files);\n        this.files = file;\n    }.bind(this))\n\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456426253641,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    HistoryService.onUpdateFiles(function(file){\n        this.files = file;\n    }.bind(this))\n\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456426008109,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        console.log(file);\n        this.files = file;\n      }.bind(this));\n    }.bind(this))\n\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456425989907,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        console.log(file);\n        this.files = file;\n      }.bind(this));\n    })\n\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456425895257,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope', '$timeout',\n  function (HistoryService, VisibilityService, SocketIOService, $scope, $timeout) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        console.log(file);\n        this.files = file;\n      });\n    })\n\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1456425745706,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    HistoryService.onUpdateFiles(function(file){\n      $timeout(function () {\n        console.log(file);\n        this.files = file;\n      });\n    })\n\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448988206912,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.getFiles();\n\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log(this.files);\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448988205252,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.getFiles();\n\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log(thi.files);\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448988200981,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.getFiles();\n\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log($scope.files);\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448988089263,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    $scope.files = HistoryService.getFiles();\n\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log($scope.files);\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448987983280,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    $scope.files = HistoryService.getFiles();\n\n    SocketIOService.onHistoryInit(function(historyR){\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log($scope.files);\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448987943506,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    $scope.files = HistoryService.getFiles();\n\n    SocketIOService.onHistoryInit(function(historyR){\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log(this.files);\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448987862562,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.getFiles();\n\n    SocketIOService.onHistoryInit(function(historyR){\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log(this.files);\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448987658875,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n\n    SocketIOService.onHistoryInit(function(historyR){\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log(this.files);\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448987603583,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n\n    SocketIOService.onHistoryInit(function(historyR){\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log('o');\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"},{"timestamp":1448987598279,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n\n    SocketIOService.onHistoryInit(function(historyR){\n      HistoryService.setFiles(Object.keys(historyR));\n      HistoryService.setHistory(historyR);\n      $scope.$apply();\n      console.log('o');\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);sqd\n"},{"timestamp":1448987470100,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n\n    SocketIOService.onHistoryInit(function(historyR){\n      HistoryService.files = historyR;\n      HistoryService.history = historyR;\n      $scope.$apply();\n      console.log('o');\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);sqd\n"},{"timestamp":1448987395428,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n\n    SocketIOService.onHistoryInit(function(historyR){\n      this.files = Object.keys(historyR);\n      HistoryService.files = historyR;\n      HistoryService.history = historyR;\n      $scope.$apply();\n      console.log('o');\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);sqd\n"},{"timestamp":1448987369630,"content":"'use strict';\nangular.module('FileSync').controller('HistoryCtrl', ['HistoryService', 'VisibilityService', 'SocketIOService', '$scope',\n  function (HistoryService, VisibilityService, SocketIOService, $scope) {\n    this.edits = HistoryService.edits;\n    this.visibility = VisibilityService;\n    this.files = HistoryService.files;\n\n    SocketIOService.onHistoryInit(function(historyR){\n      this.files = Object.keys(historyR);\n      HistoryService.files = historyR;\n      HistoryService.history = historyR;\n      $scope.$apply();\n      console.log('o');\n    }.bind(this));\n    this.loadHistory = HistoryService.loadHistory;\n    this.remove = function (edit) {\n      HistoryService.remove(edit);\n    };\n  }\n]);\n"}],"HistoryService.js":[{"timestamp":1456436520443,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var current;\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      if(current === filename || !current){\n        edits.unshift({timestamp: timestamp, content: content});\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      angular.copy(Object.keys(historyR),files);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        current = filename;\n        angular.copy(history[filename],edits);\n      },\n    };\n  });\n"},{"timestamp":1456436510490,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var current;\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      if(current === filename || current){\n        edits.unshift({timestamp: timestamp, content: content});\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      angular.copy(Object.keys(historyR),files);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        current = filename;\n        angular.copy(history[filename],edits);\n      },\n    };\n  });\n"},{"timestamp":1456436473363,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var current;\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      if()\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      angular.copy(Object.keys(historyR),files);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        current = filename;\n        angular.copy(history[filename],edits);\n      },\n    };\n  });\n"},{"timestamp":1456436452713,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var current;\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      if()\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      angular.copy(Object.keys(historyR),files);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        angular.copy(history[filename],edits);\n      },\n    };\n  });\n"},{"timestamp":1456436280485,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      angular.copy(Object.keys(historyR),files);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        angular.copy(history[filename],edits);\n      },\n    };\n  });\n"},{"timestamp":1456436167841,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      angular.copy(Object.keys(historyR),files);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456436154211,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files;\n    var history;\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      angular.copy(Object.keys(historyR),files);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456435972523,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files;\n    var history;\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      files = Object.keys(historyR);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456435181351,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      files = Object.keys(historyR);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456435180618,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      debugger;\n      \n      files = Object.keys(historyR);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456434958124,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      debugger;\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456434898480,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456434874985,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.unshift({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456434543436,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      edits.push({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456434541613,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      debugger;\n      edits.push({timestamp: timestamp, content: content});\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456434505278,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      debugger;\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456431932376,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        console.log();\n        history[filename] = new Array();\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456431866530,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456431697917,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n      debugger;\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456431009684,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456430934103,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n      _callback(files);\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n      _callback(files);\n    });\n\n    return {\n      edits: edits,\n      files : files,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456429364246,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n      _callback(files);\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      console.log(files);\n      _callback(files);\n    });\n\n    return {\n      edits: edits,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456425845416,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n    var _callback;\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n      _callback(files);\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      _callback(files);\n    });\n\n    return {\n      edits: edits,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1456425802382,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n      _callback(files);\n    });\n    SocketIOService.onHistoryInit(function(historyR){\n      files = Object.keys(historyR);\n      history = historyR;\n      _callback(files);\n    });\n\n    return {\n      edits: edits,\n      onUpdateFiles: function(f){\n        _callback = f;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n    };\n  });\n"},{"timestamp":1448987920670,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      getFiles: function(){\n        return files;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        files = filesR;\n        console.log(this.getFiles());\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\n"},{"timestamp":1448987910162,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      getFiles: function(){\n        return files;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        files = filesR;\n        console.log(this.getAll());\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\n"},{"timestamp":1448987855859,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      getFiles: function(){\n        return files;\n      },\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        files = filesR;\n        console.log(this.files);\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\n"},{"timestamp":1448987830724,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      files: files,\n      history: history,\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        files = filesR;\n        console.log(this.files);\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\n"},{"timestamp":1448987818072,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      files: files,\n      history: history,\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        files = filesR;\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\n"},{"timestamp":1448987801377,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      files: files,\n      history: history,\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        console.log(filesR);\n        files = filesR;\n        console.log(files);\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\n"},{"timestamp":1448987767979,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      files: files,\n      history: history,\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        console.log(filesR);\n        files = filesR;\n        console.log(history);\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\n"},{"timestamp":1448987751375,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      files: files,\n      history: history,\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        console.log(fileR);\n        files = filesR;\n        console.log(history);\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\n"},{"timestamp":1448987606167,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      files: files,\n      history: history,\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        files = filesR;\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\n"},{"timestamp":1448987564137,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      files: files,\n      history: history,\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      },\n      setFiles: function(filesR){\n        files = filesR;\n      },\n      setHistory: function(historyR){\n        history = historyR;\n      }\n    };\n  });\ns\n"},{"timestamp":1448987402733,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      files: files,\n      history: history,\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      }\n    };\n  });\ns\n"},{"timestamp":1448987401832,"content":"'use strict';\nangular.module('FileSync')\n  .factory('HistoryService', function (SocketIOService, _) {\n    var edits = [];\n    var files = [];\n    var history = [];\n\n    SocketIOService.onFileChanged(function (filename, timestamp, content) {\n      if(!history[filename]){\n        files.push(filename);\n        history[filename] = new Array();\n        console.log(history);\n        console.log(files);\n      }\n      history[filename].unshift({timestamp: timestamp, content: content});\n    });\n\n    return {\n      edits: edits,\n      files: files,\n      history: history,\n      remove: function (edit) {\n        _.remove(edits, edit);\n      },\n      loadHistory: function(filename){\n        edits = history[filename];\n      }\n    };\n  });\n"}],"server.js":[{"timestamp":1456435262347,"content":"'use strict';\n\nvar io = require('socket.io');\nvar express = require('express');\nvar path = require('path');\nvar app = express();\nvar _ = require('lodash');\nvar fs = require('fs');\n\nvar logger = require('winston');\nvar config = require('./config')(logger);\n\napp.use(express.static(path.resolve(__dirname, './public')));\n\napp.get('/', function(req, res) {\n  res.sendFile(__dirname + '/public/index.html');\n});\n\nvar server = app.listen(config.server.port, function() {\n  logger.info('Server listening on %s', config.server.port);\n});\n\nvar history;\n\nfs.readFile('history.json', 'utf8', function(err, content){\n  if(err) {\n    fs.writeFileSync('history.json', JSON.stringify({}));\n    history = new Object();\n  } else {\n    if(content == \"\"){\n      history = new Object();\n    } else {\n      history = JSON.parse(content);\n    }\n  }\n})\n\nvar sio = io(server);\n\nsio.set('authorization', function(handshakeData, accept) {\n  // @todo use something else than a private `query`\n  handshakeData.isAdmin = handshakeData._query.access_token === config.auth.token;\n  accept(null, true);\n});\n\nfunction Viewers(sio) {\n  var data = [];\n\n  function notifyChanges() {\n    sio.emit('viewers:updated', data);\n  }\n\n  return {\n    add: function add(nickname) {\n      data.push(nickname);\n      notifyChanges();\n    },\n    remove: function remove(nickname) {\n      var idx = data.indexOf(nickname);\n      if (idx > -1) {\n        data.splice(idx, 1);\n      }\n      notifyChanges();\n      console.log('-->', data);\n    }\n  };\n}\n\nvar viewers = Viewers(sio);\n\n\n// @todo extract in its own\nsio.on('connection', function(socket) {\n    console.log(Object.keys(history).length);\n  if(Object.keys(history).length > 0){\n    sio.emit('history:init', history);\n  }\n  // console.log('nouvelle connexion', socket.id);\n  socket.on('viewer:new', function(nickname) {\n    socket.nickname = nickname;\n    viewers.add(nickname);\n    console.log('new viewer with nickname %s', nickname, viewers);\n  });\n\n  socket.on('disconnect', function() {\n    viewers.remove(socket.nickname);\n    console.log('viewer disconnected %s\\nremaining:', socket.nickname, viewers);\n  });\n\n  socket.on('file:changed', function() {\n    if (!socket.conn.request.isAdmin) {\n      // if the user is not admin\n      // skip this\n      return socket.emit('error:auth', 'Unauthorized :)');\n    }\n      var obj = {\"timestamp\" : arguments[1], \"content\": arguments[2]};\n      if(!history[arguments[0]]){\n        history[arguments[0]] = new Array();\n      }\n      history[arguments[0]].unshift(obj);\n      fs.writeFile('history.json', JSON.stringify(history), function(err){\n        if(err) console.log(err);\n      });\n    // forward the event to everyone\n    sio.emit.apply(sio, ['file:changed'].concat(_.toArray(arguments)));\n  });\n\n  socket.visibility = 'visible';\n\n  socket.on('user-visibility:changed', function(state) {\n    socket.visibility = state;\n    sio.emit('users:visibility-states', getVisibilityCounts());\n  });\n});\n\nfunction getVisibilityCounts() {\n  return _.chain(sio.sockets.sockets).values().countBy('visibility').value();\n}\n"}],"SocialCtrl.js":[{"timestamp":1456436539256,"content":"'use strict';\nangular\n  .module('FileSync')\n  .controller('SocialCtrl', ['$scope', 'SocketIOService', function($scope, SocketIOService) {\n    this.viewers = [];\n\n    function onViewersUpdated(viewers) {\n      this.viewers = viewers;\n      $scope.$apply();\n    }\n    SocketIOService.onViewersUpdated(onViewersUpdated.bind(this));\n  }]);\n"},{"timestamp":1456436527595,"content":"'use strict';\nangular\n  .module('FileSync')\n  .controller('SocialCtrl', ['$scope', 'SocketIOService', function($scope, SocketIOService) {\n    this.viewers = [];\n\n    function onViewersUpdated(viewers) {\n      this.viewers = viewers;\n      $scope.$apply();\n    }\ndsq\n    SocketIOService.onViewersUpdated(onViewersUpdated.bind(this));\n  }]);\n"}]}